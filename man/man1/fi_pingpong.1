.TH fi_pingpong 1 "2016\-08\-26" "Libfabric Programmer\[aq]s Manual" "\@VERSION\@"
.SH NAME
.PP
fi_pingpong - Quick and simple pingpong test for libfabric
.SH SYNOPSYS
.IP
.nf
\f[C]
\ fi_pingpong\ [OPTIONS]\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ start\ server
\ fi_pingpong\ [OPTIONS]\ <server\ address>\ \ \ \ \ connect\ to\ server
\f[]
.fi
.SH DESCRIPTION
.PP
fi_pingpong is a generic pingpong test for the core feature of the
libfabric library: transmitting data between two processes.
fi_pingpong also displays aggregated statistics after each test run, and
can additionally verify data integrity upon receipt.
.PP
By default, the datagram (FI_EP_DGRAM) endpoint is used for the test,
unless otherwise specified via -e.
.SH HOW TO RUN TESTS
.PP
Two copies of the program must be launched: first, one copy must be
launched as the server.
Second, another copy is launched with the address of the server.
.PP
As a client-server test, each have the following usage model:
.SS Start the server
.IP
.nf
\f[C]
server$\ fi_pingpong
\f[]
.fi
.SS Start the client
.IP
.nf
\f[C]
client$\ fi_pingpong\ <server\ endpoint\ address>
\f[]
.fi
.SH OPTIONS
.PP
The client\[aq]s command line options must match those used on the
server.
If they do not match, the client and server may not be able to
communicate properly.
.SS Nodes addressing
.PP
\f[I]-B <src_port>\f[] : The non-default source port number of the
endpoint.
.PP
\f[I]-P <dest_port>\f[] : The non-default destination port number of the
endpoint.
.SS Fabric
.PP
\f[I]-p <provider_name>\f[] : The name of the underlying fabric provider
(e.g., sockets, psm, usnic, etc.)
\&.
If a provider is not specified via the -f switch, the test will pick one
from the list of available providers (as returned by fi_getinfo(3)).
.PP
\f[I]-p <endpoint>\f[] where endpoint = (dgram|rdm|msg) : The type of
endpoint to be used for data messaging between the two processes.
.PP
\f[I]-d <domain>\f[] : The name of the specific domain to be used.
.SS Messaging
.PP
\f[I]-I <iter>\f[] : The number of iterations of the test will run.
.PP
\f[I]-S <msg_size>\f[] : The specific size of the message in bytes the
test will use or \[aq]all\[aq] to run all the default sizes.
.SS Utils
.PP
\f[I]-c\f[] : Activate data integrity checks at the receiver (note: this
may have performance impact).
.PP
\f[I]-v\f[] : Activate output debugging (warning: highly verbose)
.PP
\f[I]-h\f[] : Displays help output for the pingpong test.
.SH USAGE EXAMPLES
.SS A simple example
.SS Server: \f[C]fi_pingpong\ -p\ <provider_name>\f[]
.PP
\f[C]server$\ fi_pingpong\ -p\ sockets\f[]
.SS Client: \f[C]fi_pingpong\ -p\ <provider_name>\ <server_addr>\f[]
.PP
\f[C]client$\ fi_pingpong\ -p\ sockets\ 192.168.0.123\f[]
.SS An example with various options
.SS Server:
.PP
\f[C]server$\ fi_pingpong\ -p\ usnic\ -I\ 1000\ -S\ 1024\f[]
.SS Client:
.PP
\f[C]client$\ fi_pingpong\ -p\ usnic\ -I\ 1000\ -S\ 1024\ 192.168.0.123\f[]
.PP
Specifically, this will run a pingpong test with:
.IP
.nf
\f[C]
-\ usNIC\ provider
-\ 1000\ iterations
-\ 1024\ bytes\ message\ size
-\ server\ node\ as\ 192.168.0.123
\f[]
.fi
.SS A longer test
.SS Server:
.PP
\f[C]server$\ fi_pingpong\ -p\ usnic\ -I\ 10000\ -S\ all\f[]
.SS Client:
.PP
\f[C]client$\ fi_pingpong\ -p\ usnic\ -I\ 10000\ -S\ all\ 192.168.0.123\f[]
.SH DEFAULTS
.PP
There is no default provider; if a provider is not specified via the
\f[C]-p\f[] switch, the test will pick one from the list of available
providers (as returned by \f[C]fi_getinfo\f[](3)).
.PP
If no endpoint type is specified, \[aq]dgram\[aq] is used.
.PP
The default tested sizes are: 64, 256, 1024, 4096.
.PP
If no server address is specified, the server address is determined by
the selected provider.
With the current implementation of libfabric, it means that the picked
address will be the first address in the list of available addresses
matching the selected provider.
.SH OUTPUT
.PP
Each test generates data messages which are accounted for.
Specifically, the displayed statistics at the end are :
.IP \[bu] 2
\f[I]bytes\f[] : number of bytes per message sent
.IP \[bu] 2
\f[I]#sent\f[] : number of messages (ping) sent from the client to the
server
.IP \[bu] 2
\f[I]#ack\f[] : number of replies (pong) of the server received by the
client
.IP \[bu] 2
\f[I]total\f[] : amount of memory exchanged between the processes
.IP \[bu] 2
\f[I]time\f[] : duration of this single test
.IP \[bu] 2
\f[I]MB/sec\f[] : throughput computed from \f[I]total\f[] and
\f[I]time\f[]
.IP \[bu] 2
\f[I]usec/xfer\f[] : average time for transfering a message outbound
(ping or pong) in microseconds
.IP \[bu] 2
\f[I]Mxfers/sec\f[] : average amount of transfers of message outbound
per second
.SH SEE ALSO
.PP
\f[C]fi_info\f[](1), \f[C]fabric\f[](7), \f[C]fi_provider\f[](7)
.SH AUTHORS
OpenFabrics.
